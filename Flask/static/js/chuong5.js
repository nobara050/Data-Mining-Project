let selectedColumns = []; // Bi·∫øn l∆∞u tr·ªØ c√°c c·ªôt ƒë∆∞·ª£c ch·ªçn

// X·ª≠ l√Ω s·ª± ki·ªán t·∫£i l√™n file CSV
function handleFileUpload(event) {
  const file = event.target.files[0];
  if (!file) {
    console.log("No file selected");
    return;
  }

  // Reset c√°c k·∫øt qu·∫£ c≈©
  selectedColumns = []; // X√≥a danh s√°ch c√°c c·ªôt ƒë√£ ch·ªçn
  const buttonsContainer = document.getElementById("columns-buttons-container");
  buttonsContainer.innerHTML = ""; // X√≥a c√°c n√∫t c·ªôt c≈©
  document.getElementById("table-container").innerHTML = ""; // X√≥a b·∫£ng c≈©
  document.getElementById("result").innerHTML = ""; // X√≥a k·∫øt qu·∫£ c≈©
  document.querySelector(".Diagram-cluster").innerHTML = ""; // X√≥a h√¨nh ·∫£nh c≈©

  const formData = new FormData();
  formData.append("file", file);

  fetch("/upload", {
    method: "POST",
    body: formData,
  })
    .then((response) => response.json())
    .then((data) => {
      if (data.table && data.columns) {
        // Hi·ªÉn th·ªã b·∫£ng t·ª´ d·ªØ li·ªáu tr·∫£ v·ªÅ
        document.getElementById("table-container").innerHTML = data.table;

        // L·∫•y d·ªØ li·ªáu c·ªôt t·ª´ response v√† t·∫°o c√°c n√∫t
        const columns = data.columns;
        createButtons(columns); // T·∫°o l·∫°i c√°c n√∫t c·ªôt
      } else if (data.error) {
        console.error("Error:", data.error);
        alert("Up File kh√¥ng th√†nh c√¥ng r·ªìi"); // Hi·ªÉn th·ªã th√¥ng b√°o l·ªói n·∫øu c√≥
      }
    })
    .catch((error) => {
      console.error("Error uploading file:", error);
      alert("Upload file l·ªói r·ªìi üò¢");
    });
}

// T·∫°o c√°c n√∫t ƒë·ªÉ ch·ªçn c·ªôt
function createButtons(columns) {
  const buttonsContainer = document.getElementById("columns-buttons-container");
  buttonsContainer.innerHTML = ""; // Reset c√°c n√∫t c≈©

  columns.forEach((column) => {
    const button = document.createElement("button");
    button.textContent = column;
    button.classList.add("column-btn");
    button.onclick = () => toggleColumnSelection(button, column); // T·∫°o s·ª± ki·ªán cho c√°c n√∫t
    buttonsContainer.appendChild(button);
  });
}

// Toggle ch·ªçn c·ªôt
function toggleColumnSelection(button, column) {
  if (selectedColumns.includes(column)) {
    selectedColumns = selectedColumns.filter((col) => col !== column);
    button.classList.remove("selected");
  } else {
    selectedColumns.push(column);
    button.classList.add("selected");
  }
  console.log("Selected Columns:", selectedColumns);
}

// X·ª≠ l√Ω K-Means khi ng∆∞·ªùi d√πng nh·∫•n n√∫t
function handleKMeans() {
  const kInput = document.querySelector(".numKmean");
  const k = parseInt(kInput.value, 10);
  const fileInput = document.getElementById("csv-upload");

  if (!fileInput.files[0]) {
    alert("File upload ch∆∞a nh·∫≠n, m·ªùi b·∫°n upload file m·ªõi ƒë·ªÉ gom c·ª•m nha!");
    return;
  }

  if (isNaN(k) || k <= 0) {
    alert("H√£y nh·∫≠p s·ªë K h·ª£p l·ªá (l·ªõn h∆°n 0)");
    return;
  }

  if (selectedColumns.length === 0) {
    alert("B·∫°n ch∆∞a ch·ªçn c·ªôt thu·ªôc t√≠nh ƒë·ªÉ t√≠nh gom c·ª•m k√¨a!");
    return;
  }

  const formData = new FormData();
  formData.append("file", fileInput.files[0]);
  formData.append("k", k);
  formData.append("columns", JSON.stringify(selectedColumns));

  fetch("http://127.0.0.1:5000/chuong5", {
    method: "POST",
    body: formData,
  })
    .then((response) => response.json())
    .then((data) => {
      if (data.clusters && data.data) {
        renderClusterInput(data.clusters, data.data);
        display3DImage(data.image); // Display the 3D plot image
        alert("Gom c·ª•m K-Means th√†nh c√¥ng üòä!");
      } else if (data.error) {
        alert("Gom c·ª•m x·∫£y ra l·ªói r·ªìi üò¢");
      }
    })
    .catch((error) => {
      console.error("Error:", error);
      alert("Gom c·ª•m kh√¥ng th√†nh c√¥ng. H√£y th·ª≠ l·∫°i l·∫ßn sau nha üò¢!");
    });
}

// function display3DImage(imageBase64) {
//   const diagramClusterDiv = document.querySelector(".Diagram-cluster");

//   // Create an image element and set the src to the base64-encoded image
//   const img = document.createElement("img");
//   img.src = `data:image/png;base64,${imageBase64}`;
//   img.alt = "3D Cluster Diagram";

//   // Clear previous image if any
//   diagramClusterDiv.innerHTML = "";

//   // Append the new image
//   diagramClusterDiv.appendChild(img);
// }

// function renderClusterInput(clusters, data) {
//   const resultDiv = document.getElementById("result");
//   resultDiv.innerHTML = ""; // Clear previous result

//   // T·∫°o m·ªôt div ch·ª©a k·∫øt qu·∫£
//   const clusterContainer = document.createElement("div");

//   clusters.forEach((cluster, index) => {
//     const clusterDiv = document.createElement("div");
//     clusterDiv.classList.add("cluster");

//     // T·∫°o ti√™u ƒë·ªÅ cho c·ª•m
//     const clusterTitle = document.createElement("h4");
//     clusterTitle.textContent = `${cluster}:`;

//     // T·∫°o m·ªôt input cho t·ª´ng c·ª•m, hi·ªÉn th·ªã c√°c s·ªë th·ª© t·ª± c·ªßa ph·∫ßn t·ª≠
//     const input = document.createElement("input");
//     input.type = "text";
//     input.value = data[index].join(" "); // Hi·ªÉn th·ªã c√°c s·ªë th·ª© t·ª± c·ªßa ph·∫ßn t·ª≠ trong c·ª•m

//     // Th√™m ti√™u ƒë·ªÅ v√† input v√†o div c·ªßa c·ª•m
//     clusterDiv.appendChild(clusterTitle);
//     clusterDiv.appendChild(input);

//     // Th√™m div c·ªßa c·ª•m v√†o container
//     clusterContainer.appendChild(clusterDiv);
//   });

//   // Th√™m container v√†o resultDiv
//   resultDiv.appendChild(clusterContainer);
// }

function renderClusterInput(clusters, data) {
  const resultDiv = document.getElementById("result");
  resultDiv.innerHTML = ""; // Clear previous result

  // T·∫°o m·ªôt div ch·ª©a k·∫øt qu·∫£
  const clusterContainer = document.createElement("div");

  clusters.forEach((cluster, index) => {
    const clusterDiv = document.createElement("div");
    clusterDiv.classList.add("cluster");

    // T·∫°o ti√™u ƒë·ªÅ cho c·ª•m
    const clusterTitle = document.createElement("h4");
    clusterTitle.textContent = `${cluster}:`;

    // T·∫°o m·ªôt input cho t·ª´ng c·ª•m, hi·ªÉn th·ªã c√°c s·ªë th·ª© t·ª± c·ªßa ph·∫ßn t·ª≠
    const input = document.createElement("input");
    input.type = "text";
    input.value = data[index].join(" "); // Hi·ªÉn th·ªã c√°c s·ªë th·ª© t·ª± c·ªßa ph·∫ßn t·ª≠ trong c·ª•m

    // Th√™m ti√™u ƒë·ªÅ v√† input v√†o div c·ªßa c·ª•m
    clusterDiv.appendChild(clusterTitle);
    clusterDiv.appendChild(input);

    // Th√™m div c·ªßa c·ª•m v√†o container
    clusterContainer.appendChild(clusterDiv);
  });

  // Th√™m container v√†o resultDiv
  resultDiv.appendChild(clusterContainer);
}

function display3DImage(imageData) {
  const diagramContainer = document.querySelector(".Diagram-cluster");
  diagramContainer.innerHTML = ""; // Clear any existing image

  const img = document.createElement("img");
  img.src = `data:image/png;base64,${imageData}`;
  img.alt = "KMeans Clustering 2D Plot";

  // Append the image to the Diagram-cluster div
  diagramContainer.appendChild(img);
}
