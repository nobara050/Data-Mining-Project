let selectedColumns = []; // L∆∞u tr·ªØ c√°c c·ªôt ƒë∆∞·ª£c ch·ªçn

function handleFileUpload(event) {
  const file = event.target.files[0];
  if (!file) {
    console.log("No file selected");
    return;
  }

  resetResults();
  selectedColumns = [];
  const buttonsContainer = document.getElementById("columns-buttons-container");
  buttonsContainer.innerHTML = ""; // Reset the buttons

  const formData = new FormData();
  formData.append("file", file);

  fetch("/upload", {
    method: "POST",
    body: formData,
  })
    .then((response) => response.json())
    .then((data) => {
      if (data.table && data.columns) {
        // Display the table
        document.getElementById("table-container").innerHTML = data.table;

        // Get columns and create the buttons
        const columns = data.columns;
        createButtons(columns); // Create the column buttons

        // Populate the ComboBox with columns for target selection
        populateComboBox(columns); // Populate ComboBox with columns
      } else if (data.error) {
        console.error("Error:", data.error);
        alert("L·ªói kh√¥ng load ƒë∆∞·ª£c combobox üò¢");
      }
    })
    .catch((error) => {
      console.error("Error uploading file:", error);
      alert("Upload file l·ªói r·ªìi üò¢");
    });
}

// T·∫°o c√°c n√∫t ƒë·ªÉ ch·ªçn c·ªôt
function createButtons(columns) {
  const buttonsContainer = document.getElementById("columns-buttons-container");
  buttonsContainer.innerHTML = ""; // Reset c√°c n√∫t c≈©

  columns.forEach((column) => {
    const button = document.createElement("button");
    button.textContent = column;
    button.classList.add("column-btn");
    button.onclick = () => toggleColumnSelection(button, column); // T·∫°o s·ª± ki·ªán cho c√°c n√∫t
    buttonsContainer.appendChild(button);
  });
}

// Toggle ch·ªçn c·ªôt
function toggleColumnSelection(button, column) {
  if (selectedColumns.includes(column)) {
    selectedColumns = selectedColumns.filter((col) => col !== column);
    button.classList.remove("selected");
  } else {
    selectedColumns.push(column);
    button.classList.add("selected");
  }
  console.log("Selected Columns:", selectedColumns);
}

function populateComboBox(columns) {
  const targetColumnSelect = document.getElementById("target-column");
  targetColumnSelect.innerHTML = ""; // Clear the previous options

  // Add an option for each column
  columns.forEach((column) => {
    const option = document.createElement("option");
    option.value = column;
    option.textContent = column;
    targetColumnSelect.appendChild(option);
  });
}

function createTargetColumnDropdown(columns) {
  const targetColumnSelect = document.getElementById("target-column");

  // Clear existing options
  targetColumnSelect.innerHTML = "";

  // Add a default placeholder option
  const placeholderOption = document.createElement("option");
  placeholderOption.textContent = "Select target column";
  targetColumnSelect.appendChild(placeholderOption);

  // Add options for all columns
  columns.forEach((column) => {
    const option = document.createElement("option");
    option.value = column;
    option.textContent = column;
    targetColumnSelect.appendChild(option);
  });
}

function runNaiveBayes() {
  const targetColumn = document.getElementById("target-column").value;

  if (!targetColumn) {
    alert("Vui l√≤ng ch·ªçn thu·ªôc t√≠nh quy·∫øt ƒë·ªãnh!");
    return;
  }

  if (selectedColumns.length === 0) {
    alert("Vui l√≤ng ch·ªçn √≠t nh·∫•t m·ªôt thu·ªôc t√≠nh ph√¢n l·ªõp!");
    return;
  }

  if (selectedColumns.includes(targetColumn)) {
    alert("Thu·ªôc t√≠nh quy·∫øt ƒë·ªãnh kh√¥ng ƒë∆∞·ª£c tr√πng v·ªõi thu·ªôc t√≠nh ph√¢n l·ªõp!");
    return;
  }

  fetch("/naive_bayes", {
    method: "POST",
    headers: {
      "Content-Type": "application/json",
    },
    body: JSON.stringify({
      selectedColumns: selectedColumns,
      targetColumn: targetColumn,
    }),
  })
    .then((response) => response.json())
    .then((data) => {
      if (data.error) {
        alert(`L·ªói x·ª≠ l√Ω: ${data.error}`);
        return;
      }

      // Hi·ªÉn th·ªã k·∫øt qu·∫£
      document.getElementById(
        "accuracy-input"
      ).value = `ƒê·ªô ch√≠nh x√°c: ${data.accuracy}`;

      // Hi·ªÉn th·ªã Confusion Matrix d∆∞·ªõi d·∫°ng ·∫£nh
      document.getElementById("confusion-matrix-container").innerHTML = `
            <h3>Confusion Matrix:</h3>
            <img src="${data.confusion_matrix_image_url}" alt="Confusion Matrix Image" />
          `;
    })
    .catch((error) => {
      console.error("L·ªói khi x·ª≠ l√Ω Naive Bayes:", error);
      alert("C√≥ l·ªói x·∫£y ra khi ch·∫°y Naive Bayes!");
    });
}

function resetResults() {
  document.getElementById("table-container").innerHTML = "";
  document.getElementById("columns-buttons-container").innerHTML = "";
  document.getElementById("target-column").innerHTML = "";
  document.getElementById("accuracy-input").value = "";
  document.getElementById("confusion-matrix-container").innerHTML = "";
  document.getElementById("new-prediction-table-container").innerHTML = "";
}

function handleFileUploadNew(event) {
  const file = event.target.files[0];
  if (!file) {
    alert("Ch∆∞a ch·ªçn file ƒë·ªÉ d·ª± ƒëo√°n");
    return;
  }

  const formData = new FormData();
  formData.append("file", file);

  fetch("/upload4_bayes", {
    method: "POST",
    body: formData,
  })
    .then((response) => response.json())
    .then((data) => {
      if (data.error) {
        alert(data.error);
        // File c√≥ v·∫•n ƒë·ªÅ ho·∫∑c c√≥ l·ªói x·∫£y ra r·ªìi üò¢
      } else {
        document.getElementById("new-prediction-table-container").innerHTML = `
            <h3>K·∫øt qu·∫£ d·ª± ƒëo√°n:</h3>
            ${data.table || "Kh√¥ng c√≥ d·ªØ li·ªáu"}
          `;
      }
    })
    .catch((error) => {
      alert("C√≥ l·ªói x·∫£y ra khi t·∫£i file d·ª± ƒëo√°n.");
    });
}
